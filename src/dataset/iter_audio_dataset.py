from torch.utils.data import IterableDataset

from src.dataset.audio_dataset import AudioDataset


class IterAudioDataset(AudioDataset, IterableDataset):

    def _generator(self):
        """
        Iterates over the pairs of X and y files and yields the corresponding waveform windows.

        Returns:
            tuple: A tuple containing the X_waveform_window (torch.Tensor) and the y_waveform_window (torch.Tensor).
        """
        for X_file, y_file in self.Xy_file_pairs:
            X_waveform, X_sample_rate = self._read_audio(X_file)
            y_waveform, y_sample_rate = self._read_audio(y_file)
            assert X_waveform.shape[-1] == y_waveform.shape[
                -1], f'Expected same number of samples but got {X_waveform.shape[-1]} and {y_waveform.shape[-1]} for files {X_file} and {y_file}'
            for i in range(0, X_waveform.shape[-1], self.window_size - self.window_overlap):
                X_waveform_window = X_waveform[..., i:i + self.window_size]
                y_waveform_window = y_waveform[..., i:i + self.window_size]
                yield X_waveform_window, y_waveform_window

    def __iter__(self):
        """
        Returns an iterator object that iterates over the waveform windows generated by the `_generator` method.

        Returns:
            Iterator: An iterator object that iterates over the waveform windows.
        """
        return iter(self._generator())
